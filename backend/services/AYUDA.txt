Pasos a seguir para conectarte a una tabla nueva :
1º Creamos un js (SI LO PIDEN, que seguramente si), por ejemplo, prueba.js

2º En dicho fichero tenemos que poner lo siguiente SUPER IMPORTANTE :
const db = require('./db')
const helper = require('../helper')
/*Con esto hacemos conexión a la base de datos, SOLO BASE DE DATOS*/

3º Creamos las funciones asyncronas que necesitamos, estas son las que hacen las sentencias SQL
-->Ejemplo de insert: async function insertDatas (req, res) {
const data = req.query
const result = await db.query(`INSERT INTO nombreTabla (nombre, apellido) values (?,?)`, [data.nombre, data.apellido])
return result.affectedRows
}
-->Ejemplo de delete : async function deleteData (req, res) {
const data = req.query
const resutl = await db.query(`DELETE FROM nombreTabla WHERE nombre = '${data.nombre}'`)
return result.affectedRows
}
-->Ejemplo de select : async function getData (req, res) {
const result = await db.query(`SELECT * FROM nombreTabla`)
}
-->Ejemplo de update : async function updateData(req,res){
const data = req.query
const result = await db.query(`UPDATE nombreTabla SET nombre = ? WHERE id LIKE '${data.id}'`, [data.nombre])
return result.affectedRows
}

4º ANTES DE IRNOS AL FICHERO INDEX PONEMOS LO SIGUIENTE AL FINAL DEL JS :
llamamos a cada función para exportarlo module.exports = {getData, deleteData, insertDatas}

5º Pasamos al fichero index, importamos el nuevo fichero js, creamos los endpoint, todos iguales
-->Esquema de un endpoint
app.get('/nombreFunciónAsincrona', async function(req, res, next) {
try{
res.json(await nombreFichero.getDatas(req)) //así con todos
}catch{
console.error('Error while inserting/deleting/getting items ', err.message)
next(err)
}
})

6º Cerramos el index.js y vamos a nuestra nuevaClase.tsx
7º Para poder insertar/eliminar/actualizar/añadir items tenemos que llamar al fetch
-->Ejemplo : `http://localhost:3030/nombreMétodo` // lo que pusimos en el punto 5 --> '/nombreFunciónAsincrona' es el link
                .then(response => response.json())
                .then(response => {}) //todo esto va junto

8º Y para terminar haces lo que quieras, si quieres hacer un botón que elimine y otro que inserte datos.
